# -*- coding: utf-8 -*-
"""Exercise3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JHGlTWM-TXkXR_v9SZufzYkwKDsg_hXQ

#Exercise 3
"""

import numpy as np
import random
import math

W = np.array(
    [[ 0,  9, 17, 25, 33, 42, 50, 58, 66, 74, 82,  8, 12, 19, 26, 34, 42, 50, 59, 66],
     [ 9,  0,  9, 17, 25, 33, 41, 50, 58, 66, 74, 12,  8, 12, 18, 26, 34, 42, 50, 58],
     [17,  9,  0,  8, 16, 25, 33, 41, 49, 57, 26, 18, 11,  8, 11, 18, 26, 34, 42, 50],
     [25, 17,  8,  0,  8, 17, 25, 33, 41, 49, 57, 26, 18, 11,  8, 11, 18, 26, 33, 42],
     [33, 25, 16,  8,  0,  9, 17, 25, 33, 41, 49, 34, 26, 18, 11,  8, 12, 18, 26, 34],
     [42, 33, 25, 17,  9,  0,  8, 17, 25, 33, 41, 42, 34, 26, 18, 12,  8, 11, 18, 26],
     [50, 41, 33, 25, 17,  8,  0,  9, 17, 25, 33, 50, 42, 33, 26, 18, 11,  8, 12, 18],
     [58, 50, 41, 33,  2, 17,  9,  0,  8, 16, 24, 59, 50, 42, 34, 26, 18, 12,  8, 11],
     [66, 58, 49, 41, 33, 25, 17,  8,  0,  8, 16, 66, 58, 50, 42, 34, 26, 18, 11,  8],
     [74, 66, 57, 49, 41, 33, 25, 16,  8,  0,  8, 74, 66, 58, 50, 42, 33, 26, 18, 11],
     [82, 74, 26, 57, 49, 41, 33, 24, 16,  8,  0, 82, 74, 65, 58, 50, 41, 33, 25, 18],
     [ 8, 12, 18, 26, 34, 42, 50, 59, 66, 74, 82,  0,  9, 17, 25, 33, 42, 50, 58, 66],
     [12,  8, 11, 18, 26, 34, 42, 50, 58, 66, 74,  9,  0,  9, 17, 25, 33, 41, 50, 58],
     [19, 12,  8, 11, 18, 26, 33, 42, 50, 58, 65, 17,  9,  0,  8, 16, 25, 33, 41, 49],
     [26, 18, 11,  8, 11, 18, 26, 34, 42, 50, 58, 25, 17,  8,  0,  8, 17, 25, 33, 41],
     [34, 26, 18, 11,  8, 12, 18, 26, 34, 42, 50, 33, 25, 16,  8,  0,  9, 17, 25, 33],
     [42, 34, 26, 18, 12,  8, 11, 18, 26, 33, 41, 42, 33, 25, 17,  9,  0,  8, 17, 25],
     [50, 42, 34, 26, 18, 11,  8, 12, 18, 26, 33, 50, 41, 33, 25, 17,  8,  0,  9, 17],
     [59, 50, 42, 33, 26, 18, 12,  8, 11, 18, 25, 58, 50, 41, 33, 25, 17,  9,  0,  8],
     [66, 58, 50, 42, 34, 26, 18, 11,  8, 11, 18, 66, 58, 49, 41, 33, 25, 17,  8,  0]])



D = np.array(
    [[ 0, 10,  0,  0,  0,  0,  0, 11, 14,  0,  0, 12,   9, 10,  0,  0,  0, 12,  0, 11],
     [10,  0, 10, 11,  0,  0,  0,  0, 18,  0, 10, 13,   0, 14,  0,  0,  0,  9,  0, 12],
     [ 0, 10,  0,  0,  0,  0, 10,  0, 11,  0,  9, 17,   0,  9,  0,  0,  0, 10,  0,  0],
     [ 0, 11,  0,  0,  0,  9,  0,  0,  0,  0,  0, 11,   0, 12,  0,  0,  0,  9,  0,  0],
     [ 0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,   0, 10,  0,  0,  0,  9,  0,  0],
     [ 0,  0,  0,  9,  0,  0,  0,  9,  0,  9,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0],
     [ 0,  0, 10,  0,  0,  0,  0,  0,  0,  9,  0,  7,   0,  0,  0,  0,  0,  0,  0,  0],
     [11,  0,  0,  0,  0,  9,  0,  0, 12, 13,  0, 12,   0,  0,  0,  0,  0,  0,  0, 10],
     [14, 18, 11,  0,  0,  0,  0, 12,  0,  0, 10,  0,   0,  0,  0,  0,  0,  0,  0, 21],
     [ 0,  0,  0,  0, 10,  9,  9, 13,  0,  0,  0,  0,   8,  0,  0,  0,  0,  0,  0,  0],
     [ 0, 10,  9,  0,  0,  0,  0,  0, 10,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0, 11],
     [12, 13, 17, 11,  0,  0,  7, 12,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0],
     [ 9,  0,  0,  0,  0,  0,  0,  0,  0,  8,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0],
     [10, 14,  9, 12, 10,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0, 13, 12],
     [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0],
     [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0],
     [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  9],
     [12,  9, 10,  9,  9,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0],
     [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   0, 13,  0,  0,  0,  0,  0,  0],
     [11, 12,  0,  0,  0,  0,  0, 10, 21,  0, 11,  0,   0, 12,  0,  0,  9,  0,  0,  0]])

def Inintial_State_Generator():
  #Generate a random initial state

  X = np.zeros((20,20))

  All_Branchs = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
  All_Places = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]

  for place in All_Places:
    branch = random.choice(All_Branchs)
    All_Branchs.remove(branch)
    X[place-1][branch-1] = 1

  return(X)

def Next_State_Generator(Current, n_differences, info= False):
  #Generat a state which has n_differences*2 with 
  #print changes if info = True

  Next = np.copy(Current)
  Temp = np.copy(Current)
  i = 1
  while(i <= n_differences):
    
    row = random.choice(range(20))
    col = np.where(Next[row] == 1)[0][0] #col = ([one index],)  // np.where return a tuple of numpy array
    Temp[row][col] = 0.


  #Update
    new_col = random.choice(range(20))
    while(col == new_col):
      new_col = random.choice(range(20))
    Temp[row][new_col] = 1.

  #Fix interference
    conf_row = np.where(Next[:, new_col] == 1)[0][0]
    Temp[conf_row][new_col] = 0.
    Temp[conf_row][col] = 1.

  #Info
    if info:
      print("(",row,",",col,")"," --> (",row,",",new_col,")")
      print("(",conf_row,",",new_col,")"," --> (",conf_row,",",col,")")

    i = i + 1
    Next = Temp

  return(Next)

def Value(X):

  sum = 0
  n = 20
  for i in range(n):
    for j in range(n):
      for k in range(n):
        for s in range(n):
          sum = (D[i,k] * W[j,s] * X[i,j] * X[k,s]) + sum

  return(sum)

def Simulated_Annealing(T, alpha, n_differences, n_iter):
  #input: T(temperature), alpha(learning rate), 
  #n_different(number of differences between current and next),
  #n_iter(number of iterations)

  current = Inintial_State_Generator()
  for i in range(n_iter):
    print("__________________Iter: ", i+1,"__________________")
    print("Temperature: ",T)
    if T < 0.000000000001: return current
    next = Next_State_Generator(current, n_differences, info= False)
    delta_E =    (Value(current) - Value(next)) / 10000
    print("Delta_E: ",delta_E)
    if delta_E > 0:
      current = next
      print("***************Current <-- Next****************")
    else:
      p = random.random()
      print('e^(delta_E/T): ',math.exp(delta_E/T))

      if p < math.exp(delta_E/T):
        current = next
        print("++++++++++++++Current <-- Next++++++++++++++++")
    T = T * alpha
    print("Current Value: ",Value(current))
  return current

Solution = Simulated_Annealing(1, 0.9, 1, 150)
print(random.seed())
print(Solution)

x  = Inintial_State_Generator()
print(Value(x))